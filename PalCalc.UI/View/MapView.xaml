<Grid x:Class="PalCalc.UI.View.MapView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PalCalc.UI.View"
             xmlns:mvm="clr-namespace:PalCalc.UI.ViewModel.Mapped"
             mc:Ignorable="d"
             d:DataContext="{x:Static mvm:MapCoordViewModel.DesignerInstance}"
             d:DesignHeight="400" d:DesignWidth="400">
    
    <!-- note:
    
    tried adding pan-and-zoom using the ZoomControl from GraphSharp, but there isn't a good way to
    prevent zooming/panning outside the bounds of the base image. the transform process used by that
    control (and pretty much all other attempts at pan-and-zoom) make it non-trivial to calculate the
    bounds/corrections needed when the zoom level changes
    
    if I try this again, anything hosting this via <ToolTip> should instead use <Popup> and have its
    IsOpen state bound to IsMouseOver of the host control
    
    -->

    <Image Grid.ColumnSpan="100" Grid.RowSpan="100" Source="pack://application:,,,/PalCalc.UI;component/Resources/Map.jpeg" Stretch="Uniform" />

    <Border x:Name="IconHost" Grid.Column="1" Grid.Row="1" CornerRadius="9999" BorderThickness="2" BorderBrush="White">
        <Image Source="pack://application:,,,/PalCalc.UI;component/Resources/T_icon_compass_camp.png" />
    </Border>

    <Grid Grid.RowSpan="100" Grid.ColumnSpan="100">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="5*" />
            <ColumnDefinition Width="25*" MinWidth="40" />
            <ColumnDefinition Width="70*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="95*" />
            <RowDefinition Height="5*" />
        </Grid.RowDefinitions>

        <!-- resize text to fit -->
        <Viewbox Grid.Row="0" Grid.Column="1" StretchDirection="DownOnly" HorizontalAlignment="Left" VerticalAlignment="Bottom">
            <TextBlock Foreground="White" HorizontalAlignment="Left" VerticalAlignment="Top" Text="{Binding DisplayCoordsText}" />
        </Viewbox>
    </Grid>
</Grid>
