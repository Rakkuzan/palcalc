<UserControl x:Class="PalCalc.UI.View.Main.SolverQueueView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PalCalc.UI.View.Main"
             xmlns:vm="clr-namespace:PalCalc.UI.ViewModel"
             xmlns:mvm="clr-namespace:PalCalc.UI.ViewModel.Mapped"
             xmlns:svm="clr-namespace:PalCalc.UI.ViewModel.Solver"
             xmlns:vu="clr-namespace:PalCalc.UI.View.Utils"
             xmlns:vp="clr-namespace:PalCalc.UI.View.Pal"
             xmlns:c="clr-namespace:PalCalc.UI.ViewModel.Converters"
             xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
             xmlns:adonisExtensions="clr-namespace:AdonisUI.Extensions;assembly=AdonisUI"
             xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{x:Static svm:SolverQueueViewModel.DesignInstance}"
             >
    <UserControl.Resources>
        <c:IntToIVConverter x:Key="IIVC" />
        <c:ValueVisibilityConverter x:Key="VVC" />
        <c:CollectionVisibilityConverter x:Key="CVC" />
    </UserControl.Resources>
    <ItemsControl ItemsSource="{Binding QueuedItems}"
              dd:DragDrop.IsDragSource="True"
              dd:DragDrop.IsDropTarget="True"
              dd:DragDrop.DragHandler="{Binding}"
              dd:DragDrop.DropHandler="{Binding}"
              dd:DragDrop.DragDropContext="JobsList"
              Padding="0"
              >
        <ItemsControl.ItemTemplate>
            <DataTemplate DataType="mvm:PalSpecifierViewModel">
                <Border Padding="5" HorizontalAlignment="Stretch" BorderThickness="1" Cursor="Hand">
                    <Border.InputBindings>
                        <MouseBinding Gesture="LeftClick" Command="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl}, Path=DataContext.SelectItemCommand}" CommandParameter="{Binding}" />
                    </Border.InputBindings>
                    <Border.Style>
                        <Style TargetType="Border">
                            <Setter Property="Background" Value="Transparent" />

                            <Style.Triggers>
                                <DataTrigger Binding="{Binding LatestJob.CurrentState}" Value="Running">
                                    <Setter Property="Background" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBrush}}" />
                                </DataTrigger>

                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static adonisUi:Brushes.Layer1HighlightBorderBrush}}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Image Source="{Binding TargetPal.Icon}" Height="32" Grid.Column="0" VerticalAlignment="Center" />
                        <StackPanel HorizontalAlignment="Stretch" Grid.Column="2" vu:StackPanelExtensions.Spacing="5">
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Setter Property="FontSize" Value="11" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Margin" Value="0" />
                                </Style>
                                <Style TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                                    <Setter Property="FontSize" Value="11" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Margin" Value="0" />
                                </Style>
                                <Style TargetType="vp:PalIVsView">
                                    <Setter Property="FontSize" Value="11" />
                                </Style>
                            </StackPanel.Resources>

                            <vu:SpacedWrapPanel Orientation="Horizontal" HorizontalAlignment="Stretch" HorizontalSpacing="15">
                                <Label Content="{Binding TargetPal.Name.Value}" />

                                <vp:PalIVsView IV_HP="{Binding MinIv_HP, Converter={StaticResource IIVC}}"
                                               IV_Attack="{Binding MinIv_Attack, Converter={StaticResource IIVC}}"
                                               IV_Defense="{Binding MinIv_Defense, Converter={StaticResource IIVC}}"
                                               Visibility="{Binding HasIVs, Converter={StaticResource VVC}}"
                                               Orientation="Horizontal"
                                               />

                                <TextBlock Text="{Binding RequiredPassivesCollection.RequiredDescription.Value}" FontSize="11" />

                                <TextBlock Text="{Binding OptionalPassivesCollection.OptionalDescription.Value}" Visibility="{Binding OptionalPassivesCollection.Passives, Converter={StaticResource CVC}}" />
                            </vu:SpacedWrapPanel>

                            <StackPanel vu:StackPanelExtensions.Spacing="2">
                                <StackPanel.Resources>
                                    <Style TargetType="ProgressBar" BasedOn="{StaticResource {x:Type ProgressBar}}">
                                        <Setter Property="Minimum" Value="0" />
                                        <Setter Property="Maximum" Value="100" />
                                        <Setter Property="adonisExtensions:ProgressBarExtension.IsProgressAnimationEnabled" Value="False" />
                                        <Setter Property="Opacity" Value="0.5" />
                                        <Setter Property="IsHitTestVisible" Value="False" />
                                        <Setter Property="Height" Value="5" />

                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding LatestJob.CurrentState}" Value="Running">
                                                <Setter Property="adonisExtensions:ProgressBarExtension.IsProgressAnimationEnabled" Value="True" />
                                                <Setter Property="Opacity" Value="1" />
                                                <Setter Property="Height" Value="10" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </StackPanel.Resources>

                                <ProgressBar Value="{Binding LatestJob.SolverProgress, Mode=OneWay}" />
                                <ProgressBar Value="{Binding LatestJob.StepProgress, Mode=OneWay}" />
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </Border>
            </DataTemplate>
        </ItemsControl.ItemTemplate>
    </ItemsControl>
</UserControl>
